set nocursorline " don't highlight current line

" keyboard shortcuts
inoremap jj <ESC>

" highlight search
"set hlsearch
"nmap <leader>hl :let @/ = ""<CR>

" gui settings
if (&t_Co == 256 || has('gui_running'))
  if ($TERM_PROGRAM == 'iTerm.app')
    colorscheme solarized
  else
    colorscheme desert
  endif
endif

" Disambiguate ,a & ,t from the Align plugin, making them fast again.
"
" This section is here to prevent AlignMaps from adding a bunch of mappings
" that interfere with the very-common ,a and ,t mappings. This will get run
" at every startup to remove the AlignMaps for the *next* vim startup.
"
" If you do want the AlignMaps mappings, remove this section, remove
" ~/.vim/bundle/Align, and re-run rake in maximum-awesome.
function! s:RemoveConflictingAlignMaps()
  if exists("g:loaded_AlignMapsPlugin")
    AlignMapsClean
  endif
endfunction
command! -nargs=0 RemoveConflictingAlignMaps call s:RemoveConflictingAlignMaps()
silent! autocmd VimEnter * RemoveConflictingAlignMaps



" THIS IS WHERE MY VIMRC STARTS |||||||||||||||||||||||||||||||||||||||

set nocursorline " don't highlight current line
" keyboard shortcuts
inoremap jj <ESC>

" highlight search
"set hlsearch
"nmap <leader>hl :let @/ = ""<CR>

" gui settings
if (&t_Co == 256 || has('gui_running'))
  if ($TERM_PROGRAM == 'iTerm.app')
    colorscheme solarized
  else
    colorscheme desert
  endif
endif

" Disambiguate ,a & ,t from the Align plugin, making them fast again.
"
" This section is here to prevent AlignMaps from adding a bunch of mappings
" that interfere with the very-common ,a and ,t mappings. This will get run
" at every startup to remove the AlignMaps for the *next* vim startup.
"
" If you do want the AlignMaps mappings, remove this section, remove
" ~/.vim/bundle/Align, and re-run rake in maximum-awesome.
function! s:RemoveConflictingAlignMaps()
  if exists("g:loaded_AlignMapsPlugin")
    AlignMapsClean
  endif
endfunction
command! -nargs=0 RemoveConflictingAlignMaps call s:RemoveConflictingAlignMaps()
silent! autocmd VimEnter * RemoveConflictingAlignMaps

syntax enable
set foldmethod=indent
set foldnestmax=2

nmap <TAB> i<SPACE><SPACE><ESC>l
set shiftwidth=2
set expandtab

set tabstop=2
autocmd FileType python set tabstop=4

set scrolloff=5
set nu

nmap <silent> <c-k> :wincmd k<CR>
nmap <silent> <c-j> :wincmd j<CR>
nmap <silent> <c-h> :wincmd h<CR>
nmap <silent> <c-l> :wincmd l<CR>

set smartindent
set autoindent

highlight LineNr ctermfg=blue

" map <s-CR> 0<Esc>
" map <CR> ko<Esc>j
" map <SPACE> i<SPACE><Esc>l
" map <BACKSPACE> i<BACKSPACE><Esc>l

autocmd FileType clojure set commentstring=;\ %s
autocmd FileType scheme set commentstring=;\ %s
autocmd FileType asm set commentstring=//\ %s
autocmd FileType vm set commentstring=//\ %s

nnoremap <LEADER>w :w<CR>

" experimental runners section!

if @% == '*_spec.rb' 
  autocmd FileType ruby command! Run w % | !rspec %
endif

nnoremap <LEADER>g :call Runners()<CR>:Run<CR>
" this stuff really needs to be refactored. 

" more natural splits by default
set splitbelow
set splitright

set autochdir
let $MYVIMRC = '/users/jeff/.vimrc'

let g:gist_clip_command = 'pbcopy'

" in order to ensure that vim is congruent with zsh:
set shell=/bin/sh

call togglebg#map("<F5>")

" map <LEADER><SPACE> :%Eval<CR>
map <SPACE> :Eval<CR>

set background=light


au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces
