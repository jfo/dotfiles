set nocompatible
syntax enable
filetype plugin indent on
let mapleader = '\'

set autoindent
set autoread                                                 " reload files when changed on disk, i.e. via `git checkout`
set backspace=2                                              " Fix broken backspace in some setups
set backupcopy=yes                                           " see :help crontab
set clipboard^=unnamed                                       " yank and paste with the system clipboard
set directory-=.                                             " don't store swapfiles in the current directory
set encoding=utf-8
set expandtab                                                " expand tabs to spaces
set foldlevelstart=99
set foldmethod=indent
set foldnestmax=10
set hlsearch
set ignorecase                                               " case-insensitive search
set incsearch                                                " search as you type
set laststatus=2                                             " always show statusline
set list                                                     " show trailing whitespace
set listchars=tab:\|\ ,trail:▫
set nonumber                                                 " don't show line numbers by default
set nowrapscan                                               " don't search from top if you hit the bottom
set ruler                                                    " show where you are
set scrolloff=5                                              " show context above/below cursorline
set sessionoptions-=options
set shiftwidth=2                                             " normal mode indentation commands use 2 spaces
set showcmd
set smartcase                                                " case-sensitive search if any caps
set smartindent
set softtabstop=2                                            " insert mode tab and backspace use 2 spaces
set tabstop=8                                                " actual tabs occupy 8 characters
set wildmenu                                                 " show a navigable menu for tab completion
set wildmode=longest,list,full
autocmd VimResized * :wincmd =

" do not jump to next match immediately
nmap <silent> * "syiw<Esc>: let @/ = @s<CR>

highlight LineNr ctermfg=blue
map <silent> <leader>V :source ~/.vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>
nmap <leader>hl :let @/ = ""<CR>

" shift tab is real tabstop
inoremap <S-Tab> <C-V><Tab>
" leader w forever
nnoremap <LEADER>w :w<CR>
" open/close quickfix list easily
nnoremap <LEADER>o :copen<cr>
nnoremap <LEADER>c :cclose<cr>
" open/close location list easily
nnoremap <LEADER>lo :lopen<cr>
nnoremap <LEADER>lc :lclose<cr>

nmap <LEADER>p :let @*=expand("%")<CR>

" hey look λ lol
imap <C-l> <C-k>*l
" TODO: write these scripts again
" nnoremap <silent> go :!Git next<CR>
" nnoremap <silent> gi :!Git prev<CR>

" Enable basic mouse behavior such as resizing buffers.
set mouse=a
if exists('$TMUX') && !has('nvim')
    set ttymouse=xterm2
endif

""" Some lang specific things
autocmd BufRead,BufNewFile *.md setlocal filetype=markdown
autocmd BufRead,BufNewFile *.sld setlocal filetype=sild
    autocmd FileType sild set syntax=scheme
autocmd BufRead,BufNewFile *.ino setlocal filetype=arduino
autocmd BufRead,BufNewFile *.scala setlocal filetype=scala
autocmd BufRead,BufNewFile *.sublime-syntax setlocal filetype=yaml
autocmd BufRead,BufNewFile *.YAML* setlocal filetype=yaml
autocmd BufRead,BufNewFile *gitconfig* setlocal filetype=gitconfig

autocmd FileType scheme setlocal shiftwidth=2
autocmd FileType scheme setlocal tabstop=2
autocmd FileType scheme setlocal softtabstop=2

" cursor styles
let &t_EI .= "\e[1 q"
let &t_SI .= "\e[5 q"

colorscheme solarized

" if getcwd() =~ "web"
"   set background=light
" else
  set background=dark
" endif

" TODO: make this a toggle function
nnoremap <F5> :set background=light<CR>
nnoremap <F6> :set background=dark<CR>

" MISC FUNCTIONS AND MAPPINGS
" ------------------------------------------------------------------------------
function! StripTrailing()
    let previous_search=@/
    let previous_cursor_line=line('.')
    let previous_cursor_column=col('.')
    %s/\s\+$//e
    let @/=previous_search
    call cursor(previous_cursor_line, previous_cursor_column)
endfunction
nmap <leader><space> :call StripTrailing()<CR>

function! LineNumberToggle()
    if &number
        set nonumber
    else
        set number
    endif
endfunc
nnoremap gn :call LineNumberToggle()<CR>

function! ToggleTodo()
  if expand('%:t') == 'todo'
    :w|bd
  else
    :tab drop todo
  endif
endfunction
nnoremap <LEADER>t :call ToggleTodo()<CR>

" PLUGINS
" ------------------------------------------------------------------------------
call plug#begin('~/.vim/plugged')
    Plug 'altercation/vim-colors-solarized'
    Plug 'christoomey/vim-tmux-navigator'
    Plug 'jfo/vim-runners'
    Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
    Plug 'junegunn/fzf.vim'
    Plug 'mileszs/ack.vim'
    Plug 'moll/vim-node'
    Plug 'neomake/neomake'
    Plug 'benjie/local-npm-bin.vim'
    Plug 'prettier/vim-prettier'
    Plug 'scrooloose/nerdtree'
    Plug 'sheerun/vim-polyglot'
    Plug 'tpope/vim-commentary'
    Plug 'tpope/vim-fugitive'
    Plug 'tpope/vim-rhubarb'
    Plug 'tpope/vim-surround'
    Plug 'zig-lang/zig.vim'
    Plug 'natebosch/vim-lsc'
    if $TERM_PROGRAM == 'iterm.app'
      Plug 'ryanoasis/vim-devicons'
    endif
call plug#end()

""" Plugin Specific Commands
let g:ftplugin_sql_omni_key = '<Plug>DisableSqlOmni'
let g:NERDTreeWinSize = 50

" Ack!
nnoremap <leader>a :Ack!<space>
vnoremap <leader>a y:Ack!<space><C-R>"<CR>
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

" vim-runners
nnoremap <LEADER>g :Run<CR>

" rhubarb
map <LEADER>x :Gbrowse!<CR>
map <LEADER>X :Gbrowse<CR>

" Nerdtree
nmap <leader>d :NERDTreeToggle<CR>
nmap <leader>f :NERDTreeFind<CR>
let g:NERDSpaceDelims=1

" Holy shit FZF
nmap <C-P> :Files<CR>
nmap <leader>b :Buffers<CR>
nmap gl :Lines<CR>

" commentary.vim comment strings
autocmd FileType sild set commentstring=;\ %s
autocmd FileType hex set commentstring=#\ %s
autocmd FileType clojure set commentstring=;\ %s
autocmd FileType asm set commentstring=//\ %s
autocmd FileType vm set commentstring=//\ %s
autocmd FileType scheme set commentstring=;\ %s
autocmd FileType scala set commentstring=//\ %s
autocmd FileType php set commentstring=//\ %s
autocmd FileType arduino set commentstring=//\ %s

" neomake
" let g:neomake_javascript_enabled_makers = ['eslint_d']
" let g:neomake_logfile='/tmp/neomake_error.log'
" autocmd BufWritePost *.js Neomake

" autocmd FileType javascript.jsx nmap gp :Prettier<CR>
" autocmd FileType javascript nmap gp :Prettier<CR>

function! MyFoldText()
    let foldval = foldlevel(v:foldstart)
    let foldindent = foldval * 2 - 2
    return repeat(" ", foldindent) . "|" . repeat("―", winwidth(0))
endfunction
:hi! Folded none ctermfg=24

" tmp fix for dumb bug
let g:polyglot_disabled = ['graphql']

nmap <F3> i<C-R>=strftime("%Y-%m-%d %a %I:%M %p")<CR><CR>-----------------------<CR><CR><Esc>
imap <F3> <C-R>=strftime("%Y-%m-%d %a %I:%M %p")<CR><CR>-----------------------<CR><CR><Esc>

" TODO: make 'gf' more aware
" set path=~/development/web/apps/src
" set suffixesadd=.js,\/index.js

let g:lsc_server_commands = {
  \ 'javascript.jsx': 'node /home/jfo/code/javascript-typescript-langserver/lib/language-server-stdio',
  \ 'cpp': 'cquery --log-file=/tmp/cq.log',
  \ 'c': 'cquery --log-file=/tmp/cq.log',
  \}

let g:lsc_auto_map = {
    \ 'GoToDefinition': '<C-]>',
    \ 'FindReferences': 'gr',
    \ 'ShowHover': 'K',
    \ 'Completion': 'completefunc',
    \}
" \ 'NextReference': '<C-n>',
" \ 'PreviousReference': '<C-p>',
" \ 'FindImplementations': 'gI',
" \ 'FindCodeActions': 'ga',
" \ 'DocumentSymbol': 'go',
" \ 'WorkspaceSymbol': 'gS',


" ================== "
" see you next time! "
" ================== "
autocmd VimLeave * :mksession! ~/.vim/sessions/last.vim

